{% set name = "compiler-rt-packages" %}
{% set version = "11.0.0" %}
{% set build_number = 0 %}
{% set sha256 = "374aff82ff573a449f9aabbd330a5d0a441181c535a3599996127378112db234" %}

package:
  name: {{ name }}
  version: {{ version }}

source:
  url: https://github.com/llvm/llvm-project/releases/download/llvmorg-{{ version }}/compiler-rt-{{ version }}.src.tar.xz
  sha256: {{ sha256 }}
  patches:
    - no_codesign.diff
    - macosx_10_9.patch

build:
  number: {{ build_number }}

requirements:
  build:
    - cmake >=3.4.3
    - {{ compiler('cxx') }}
    - python
    - make  # [unix]
  host:
    - clangdev {{ version }}
    - llvmdev {{ version }}
    - libcxx {{ cxx_compiler_version }}  # [osx]

test:
  files:
    - test.c.in
  commands:
  {% set NEW_TARGET="10." ~ (((MACOSX_DEPLOYMENT_TARGET|default("10.13")).split(".")[1])|int + 1) %}
    - sed "s/@MACOSX_DEPLOYMENT_TARGET@/{{ NEW_TARGET }}/g" test.c.in > test.c
    - clang -mmacosx-version-min={{ MACOSX_DEPLOYMENT_TARGET }} test.c  # [osx]
    - test -f $PREFIX/lib/clang/{{ version }}/include/sanitizer/asan_interface.h  # [unix]

outputs:
  - name: compiler-rt_{{ target_platform }}
    build:
      noarch: generic
      ignore_run_exports:
        - vc
        - libcxx
        - libgcc-ng
        - libstdcxx-ng
      detect_binary_files_with_prefix: false  # [win]
    requirements:
      build:
        - {{ compiler('cxx') }}
      run:
        - libcxx >={{ cxx_compiler_version }}  # [osx]
        - clang {{ version }}
        - clangxx {{ version }}
      run_constrained:
        - compiler-rt {{ version }}
    files:
      - lib/clang/{{ version }}/lib

  - name: compiler-rt
    requirements:
      build:
        - {{ compiler('cxx') }}
      run:
        - clang {{ version }}
        - clangxx {{ version }}
        - compiler-rt_{{ target_platform }} {{ version }}
    files:
      - lib/clang/{{ version }}/share             # [unix]
      - lib/clang/{{ version }}/include           # [unix]
      - Library/lib/clang/{{ version }}/share     # [win]
      - Library/lib/clang/{{ version }}/include   # [win]
      - Library/lib/clang/{{ version }}/lib       # [win]

about:
  home: http://llvm.org/
  license: NCSA
  license_file: LICENSE.TXT
  summary: compiler-rt runtime libraries
  description: |
    builtins - low-level target-specific hooks required by code generation and other
      runtime components
    sanitizer runtimes - AddressSanitizer, ThreadSanitizer, UndefinedBehaviorSanitizer,
      MemorySanitizer, LeakSanitizer, DataFlowSanitizer
    profile - library which is used to collect coverage information
    BlocksRuntime - target-independent implementation of Apple "Blocks" runtime
      interfaces

extra:
  recipe-maintainers:
    - SylvainCorlay
    - inducer
    - jakirkham
    - isuruf
